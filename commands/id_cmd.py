import logging
import re
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import UserNotParticipant, UsernameNotOccupied, UsernameInvalid
from db.db_utils import get_user_prefix
from utils.filters import template_filter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

async def id_command(client: Client, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–¥: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —á–∞—Ç–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–≥—É."""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        prefix = await get_user_prefix(user_id)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–¥ –¥–ª—è user_id={user_id}, chat_id={chat_id}, –ø—Ä–µ—Ñ–∏–∫—Å: '{prefix}'")

        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        text = message.text.strip()
        parts = text.split()
        if len(parts) < 2 or parts[1].lower() != "–∏–¥":
            await message.edit_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{prefix} –∏–¥` –∏–ª–∏ `{prefix} –∏–¥ @username`")
            logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {text}")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        response = ""
        if len(parts) == 2 and not message.reply_to_message:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ë–µ–∑ —Ä–µ–ø–ª–∞—è –∏ —Ç–µ–≥–∞ ‚Äî ID —á–∞—Ç–∞ –∏ —Å–≤–æ–π ID
            response = (
                f"üÜî **ID —á–∞—Ç–∞**: `{chat_id}`\n"
                f"üÜî **–í–∞—à ID**: `{user_id}`\n"
            )
            logger.debug(f"–°—Ü–µ–Ω–∞—Ä–∏–π 1: ID —á–∞—Ç–∞={chat_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user_id}")

        elif message.reply_to_message:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –° —Ä–µ–ø–ª–∞–µ–º ‚Äî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–ø–ª–∞—è
            if not message.reply_to_message.from_user:
                await message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–ø–ª–∞–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                logger.error(f"from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ reply_to_message –¥–ª—è user_id={user_id}")
                return
            target_user_id = message.reply_to_message.from_user.id
            target_username = f"@{message.reply_to_message.from_user.username}" if message.reply_to_message.from_user.username else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            response = (
                f"üÜî **ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: `{target_user_id}`\n"
                f"üîó **Username**: {target_username}\n"
            )
            logger.debug(f"–°—Ü–µ–Ω–∞—Ä–∏–π 2: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è={target_user_id}, username={target_username}")

        elif len(parts) == 3 and parts[2].startswith("@"):
            # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –° —Ç–µ–≥–æ–º ‚Äî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
            username = parts[2]
            if not re.match(r"^@[A-Za-z0-9_]{5,}$", username):
                await message.edit_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞: {username}")
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞: {username}")
                return
            try:
                user = await client.get_users(username)
                response = (
                    f"üÜî **ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: `{user.id}`\n"
                    f"üîó **Username**: @{user.username}\n"
                )
                logger.debug(f"–°—Ü–µ–Ω–∞—Ä–∏–π 3: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è={user.id}, username=@{user.username}")
            except UsernameNotOccupied:
                await message.edit_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                logger.error(f"Username {username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            except UsernameInvalid:
                await message.edit_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–≥: {username}")
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–≥: {username}")
                return
            except UserNotParticipant:
                await message.edit_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —á–∞—Ç–µ")
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —á–∞—Ç–µ")
                return
            except Exception as e:
                await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
                return

        else:
            await message.edit_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{prefix} –∏–¥`, `{prefix} –∏–¥ @username` –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {text}")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.edit_text(response.strip())
        logger.info(f"ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è user_id={user_id}: {response.strip()}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ id_command –¥–ª—è user_id={user_id}: {e}")
        try:
            await message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
        except Exception as edit_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_e}")

def register(app: Client):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–¥."""
    app.on_message(template_filter("–∏–¥", ignore_case=True) & filters.me)(id_command)