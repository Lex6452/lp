import logging
import os
import unicodedata
import re
import subprocess
import random
from pyrogram import Client, filters
from pyrogram.types import Message
from db.db_utils import voice_message_exists, save_voice_message, delete_voice_message, list_voice_messages, get_voice_message
from utils.filters import add_voice_filter, delete_voice_filter, get_voice_filter, list_voices_filter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def normalize_filename(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞, —É–¥–∞–ª—è—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã."""
    name = unicodedata.normalize('NFKD', name).encode('ASCII', 'ignore').decode('ascii')
    name = name.replace(' ', '_')
    name = re.sub(r'[^\w.]', '', name)
    name = re.sub(r'_+', '_', name)
    name = name.strip('_')
    return name or 'voice'

def generate_unique_filename(save_dir: str, user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    while True:
        random_id = random.randint(100000, 999999)  # –°–ª—É—á–∞–π–Ω–æ–µ 6-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
        file_path = os.path.join(save_dir, f"voice_{user_id}_voice_{random_id}.ogg")
        if not os.path.exists(file_path):
            return file_path

async def has_audio_track(file_path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –≤ —Ñ–∞–π–ª–µ."""
    try:
        command = [
            'ffprobe',
            '-i', file_path,
            '-show_streams',
            '-select_streams', 'a',
            '-loglevel', 'error'
        ]
        result = subprocess.run(command, capture_output=True, text=True)
        return bool(result.stdout.strip())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏: {e}")
        return False

async def add_voice_message_cmd(client: Client, message: Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥–æ–ª–æ—Å–∞, –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ."""
    try:
        if not message.reply_to_message or not (message.reply_to_message.voice or message.reply_to_message.audio or message.reply_to_message.video):
            await message.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≤–∏–¥–µ–æ!")
            return

        voice_name = message.text.split(maxsplit=2)[2].strip()
        user_id = message.from_user.id

        if not (1 <= len(voice_name) <= 50):
            await message.edit("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤")
            return

        if any(ord(char) < 32 for char in voice_name):
            await message.edit("‚ùå –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
            return

        if await voice_message_exists(user_id, voice_name):
            await message.edit(f"‚ùå –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å '{voice_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        save_dir = "voice_messages"
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)

        temp_path = os.path.join(save_dir, f"temp_{user_id}_{message.reply_to_message.id}")
        final_path = generate_unique_filename(save_dir, user_id)

        if message.reply_to_message.voice:
            file_to_download = message.reply_to_message.voice
        elif message.reply_to_message.audio:
            file_to_download = message.reply_to_message.audio
        else:
            file_to_download = message.reply_to_message.video

        if file_to_download.file_size > 50 * 1024 * 1024:
            await message.edit("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50 –ú–ë)")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if message.reply_to_message.voice:
            await client.download_media(file_to_download, final_path)
        else:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ
            await client.download_media(file_to_download, temp_path)
            # –î–ª—è –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OGG
            if message.reply_to_message.video:
                if not await has_audio_track(temp_path):
                    await message.edit("‚ùå –í–∏–¥–µ–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏!")
                    if os.path.exists(temp_path):
                        os.remove(temp_path)
                    return
            try:
                command = [
                    'ffmpeg',
                    '-i', temp_path,
                    '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ –¥–ª—è –≤–∏–¥–µ–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –∞—É–¥–∏–æ
                    '-c:a', 'libopus',
                    '-f', 'ogg',
                    '-y',
                    final_path
                ]
                result = subprocess.run(command, check=True, capture_output=True, text=True)
                logger.debug(f"FFmpeg process stdout: {result.stdout}")
            except subprocess.CalledProcessError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e.stderr}")
                await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e.stderr}")
                if os.path.exists(temp_path):
                    os.remove(temp_path)
                return
            except Exception as e:
                logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
                await message.edit("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ!")
                if os.path.exists(temp_path):
                    os.remove(temp_path)
                return

            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(temp_path):
                os.remove(temp_path)

        if await save_voice_message(user_id, voice_name, final_path):
            await message.edit(f"‚úÖ –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å '{voice_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            logger.info(f"Voice message '{voice_name}' saved for user {user_id} at {final_path}")
        else:
            await message.edit("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!")
            if os.path.exists(final_path):
                os.remove(final_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.remove(temp_path)
        if 'final_path' in locals() and os.path.exists(final_path):
            os.remove(final_path)

async def delete_voice_message_cmd(client: Client, message: Message):
    """–£–¥–∞–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        voice_name = message.text.split(maxsplit=2)[2].strip()
        user_id = message.from_user.id

        if await delete_voice_message(user_id, voice_name):
            await message.edit(f"üóëÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{voice_name}' —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await message.edit(f"‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{voice_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def list_voice_messages_cmd(client: Client, message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        user_id = message.from_user.id
        voices = await list_voice_messages(user_id)

        if not voices:
            await message.edit("üìÇ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")
        else:
            voices_list = "\n".join(f"{i+1}. {voice['name']}" for i, voice in enumerate(voices))
            await message.edit(f"üìÇ –í–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{voices_list}\n\n–í—Å–µ–≥–æ: {len(voices)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def get_voice_message_cmd(client: Client, message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏."""
    try:
        voice_name = message.text.split(maxsplit=2)[2].strip()
        user_id = message.from_user.id
        file_path = await get_voice_message(user_id, voice_name)

        if file_path and os.path.exists(file_path):
            await message.delete()
            await client.send_voice(message.chat.id, file_path)
        else:
            await message.edit(f"‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{voice_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def register(app: Client):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
    app.on_message(filters.create(add_voice_filter))(add_voice_message_cmd)
    app.on_message(filters.create(delete_voice_filter))(delete_voice_message_cmd)
    app.on_message(filters.create(list_voices_filter))(list_voice_messages_cmd)
    app.on_message(filters.create(get_voice_filter))(get_voice_message_cmd)