import logging
import asyncio
import re
from typing import Dict, List
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.handlers import MessageHandler
from pyrogram import errors as pyrogram_errors
from db.db_utils import get_user_prefix, save_interval, count_intervals, list_intervals, delete_interval
from utils.filters import simple_cmd_filter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
active_intervals: Dict[str, asyncio.Task] = {}

async def interval_task(client: Client, user_id: int, interval_name: str, 
                       chat_id: int, interval_text: str, interval_minutes: int):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    try:
        while True:
            try:
                await client.send_message(chat_id, interval_text)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{interval_name}' –≤ chat_id={chat_id}")
            except pyrogram_errors.ChatWriteForbidden:
                logger.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ chat_id={chat_id}")
                break
            except pyrogram_errors.ChatNotFound:
                logger.warning(f"–ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ chat_id={chat_id}: {str(e)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
                if isinstance(e, (pyrogram_errors.ChatWriteForbidden, 
                                pyrogram_errors.ChatNotFound)):
                    break
            
            await asyncio.sleep(interval_minutes * 60)
            
    except asyncio.CancelledError:
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª '{interval_name}' –æ—Ç–º–µ–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ '{interval_name}': {str(e)}")

async def add_interval_command(client: Client, message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        prefix = await get_user_prefix(user_id)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = message.text.split('\n')
        if len(lines) < 2:
            await message.edit(f"‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n–ü—Ä–∏–º–µ—Ä:\n{prefix} +–∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç–µ—Å—Ç 10\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            return

        # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        args = lines[0].strip().split()
        if len(args) < 4:
            await message.edit(f"‚ùå –§–æ—Ä–º–∞—Ç: {prefix} +–∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö")
            return

        interval_name = args[2]
        try:
            interval_minutes = int(args[3])
            if interval_minutes <= 0:
                raise ValueError
        except ValueError:
            await message.edit("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
        interval_text = '\n'.join(lines[1:]).strip()
        if not interval_text:
            await message.edit("‚ùå –¢–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        if await count_intervals(user_id) >= 5:
            await message.edit("‚ùå –õ–∏–º–∏—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (5)")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if not await save_interval(user_id, interval_name, chat_id, interval_minutes, interval_text):
            await message.edit("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–º—è –∑–∞–Ω—è—Ç–æ)")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        task_key = f"{user_id}:{interval_name}"
        if task_key in active_intervals:
            active_intervals[task_key].cancel()
            
        active_intervals[task_key] = asyncio.create_task(
            interval_task(client, user_id, interval_name, chat_id, interval_text, interval_minutes)
        )

        await message.edit(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª '{interval_name}' —Å–æ–∑–¥–∞–Ω (–∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω)")
        logger.info(f"–°–æ–∑–¥–∞–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª '{interval_name}' –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_interval_command: {str(e)}")
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def list_intervals_command(client: Client, message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
    try:
        user_id = message.from_user.id
        intervals = await list_intervals(user_id)
        
        if not intervals:
            await message.edit("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤")
            return

        response = ["üìã –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:"]
        for i, interval in enumerate(intervals, 1):
            try:
                chat = await client.get_chat(interval['chat_id'])
                chat_info = chat.title or f"ID: {interval['chat_id']}"
            except:
                chat_info = f"ID: {interval['chat_id']} (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
                
            response.append(
                f"{i}. {interval['interval_name']} - –∫–∞–∂–¥—ã–µ {interval['interval_minutes']} –º–∏–Ω\n"
                f"   –ß–∞—Ç: {chat_info}\n"
                f"   –¢–µ–∫—Å—Ç: {interval['interval_text'][:50]}..."
            )

        await message.edit("\n\n".join(response))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_intervals_command: {str(e)}")
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def delete_interval_command(client: Client, message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    try:
        user_id = message.from_user.id
        args = message.text.strip().split()
        
        if len(args) < 3:
            prefix = await get_user_prefix(user_id)
            await message.edit(f"‚ùå –§–æ—Ä–º–∞—Ç: {prefix} -–∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ")
            return

        interval_name = args[2]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        if not await delete_interval(user_id, interval_name):
            await message.edit(f"‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª '{interval_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
        task_key = f"{user_id}:{interval_name}"
        if task_key in active_intervals:
            active_intervals[task_key].cancel()
            del active_intervals[task_key]

        await message.edit(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª '{interval_name}' —É–¥–∞–ª–µ–Ω")
        logger.info(f"–£–¥–∞–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª '{interval_name}' –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_interval_command: {str(e)}")
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def register(app: Client):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    app.on_message(simple_cmd_filter("+–∏–Ω—Ç–µ—Ä–≤–∞–ª", ignore_case=True) & filters.me)(add_interval_command)
    app.on_message(simple_cmd_filter("–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã", ignore_case=True) & filters.me)(list_intervals_command)
    app.on_message(simple_cmd_filter("-–∏–Ω—Ç–µ—Ä–≤–∞–ª", ignore_case=True) & filters.me)(delete_interval_command)