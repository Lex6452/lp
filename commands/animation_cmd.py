from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait
from db.db_utils import anim_exists, save_animation, delete_animation, get_animation, list_animations
from utils.filters import add_anim_filter, delete_anim_filter, get_anim_filter, list_anims_filter
import asyncio

async def add_animation_cmd(client: Client, message: Message):
    try:
        if not message.reply_to_message or not message.reply_to_message.text:
            await message.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π!")
            return

        anim_name = message.text.split(maxsplit=1)[1].strip()
        user_id = message.from_user.id
        anim_text = message.reply_to_message.text

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞–¥—Ä—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é #$
        frames = [frame.strip() for frame in anim_text.split("#$") if frame.strip()]
        
        if len(frames) < 2:
            await message.edit("‚ùå –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 –∫–∞–¥—Ä–∞!")
            return

        if await anim_exists(user_id, anim_name):
            await message.edit(f"‚ùå –ê–Ω–∏–º–∞—Ü–∏—è '{anim_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        if await save_animation(user_id, anim_name, frames):
            await message.edit(f"‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è '{anim_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ({len(frames)} –∫–∞–¥—Ä–æ–≤)!")
        else:
            await message.edit("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
    except Exception as e:
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def delete_animation_cmd(client: Client, message: Message):
    try:
        anim_name = message.text.split(maxsplit=1)[1].strip()
        user_id = message.from_user.id

        if await delete_animation(user_id, anim_name):
            await message.edit(f"üóëÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è '{anim_name}' —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await message.edit(f"‚ùå –ê–Ω–∏–º–∞—Ü–∏—è '{anim_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    except Exception as e:
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def list_animations_cmd(client: Client, message: Message):
    try:
        user_id = message.from_user.id
        animations = await list_animations(user_id)

        if not animations:
            await message.edit("üìÇ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π!")
        else:
            anims_list = "\n".join(f"{i+1}. {name}" for i, name in enumerate(animations))
            await message.edit(f"üìÇ –í–∞—à–∏ –∞–Ω–∏–º–∞—Ü–∏–∏:\n\n{anims_list}\n\n–í—Å–µ–≥–æ: {len(animations)}")
    except Exception as e:
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def get_animation_cmd(client: Client, message: Message):
    try:
        anim_name = message.text.split(maxsplit=1)[1].strip()
        user_id = message.from_user.id
        frames = await get_animation(user_id, anim_name)

        if not frames:
            await message.edit(f"‚ùå –ê–Ω–∏–º–∞—Ü–∏—è '{anim_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        msg = await message.edit(frames[0])
        
        for frame in frames[1:]:
            try:
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
                await msg.edit(frame)
            except FloodWait as e:
                await asyncio.sleep(e.x)
            except Exception:
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ

    except Exception as e:
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def register(app: Client):
    app.on_message(filters.create(add_anim_filter))(add_animation_cmd)
    app.on_message(filters.create(delete_anim_filter))(delete_animation_cmd)
    app.on_message(filters.create(list_anims_filter))(list_animations_cmd)
    app.on_message(filters.create(get_anim_filter))(get_animation_cmd)
