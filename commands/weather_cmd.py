import logging
import re
import aiohttp
from datetime import datetime, timedelta
from pyrogram import Client, filters
from pyrogram.types import Message
from db.db_utils import get_user_prefix
from utils.filters import template_filter
from config import OPENWEATHERMAP_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
WEATHER_URL = "https://api.openweathermap.org/data/2.5/weather"
GEOCODING_URL = "https://api.openweathermap.org/geo/1.0/direct"
OPEN_METEO_URL = "https://api.open-meteo.com/v1/forecast"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≤ –ø–æ–≥–æ–¥—ã Open-Meteo –≤ –æ–ø–∏—Å–∞–Ω–∏—è –∏ emoji
WEATHER_CODE_MAP = {
    0: ("–Ø—Å–Ω–æ", "‚òÄÔ∏è"),
    1: ("–í –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ", "‚õÖ"),
    2: ("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", "‚õÖ"),
    3: ("–ü–∞—Å–º—É—Ä–Ω–æ", "‚òÅÔ∏è"),
    45: ("–¢—É–º–∞–Ω", "üå´Ô∏è"),
    48: ("–ò–∑–º–æ—Ä–æ–∑—å", "üå´Ô∏è"),
    51: ("–õ—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å", "üåßÔ∏è"),
    53: ("–ú–æ—Ä–æ—Å—å", "üåßÔ∏è"),
    55: ("–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å", "üåßÔ∏è"),
    61: ("–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å", "üåßÔ∏è"),
    63: ("–î–æ–∂–¥—å", "üåßÔ∏è"),
    65: ("–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å", "üåßÔ∏è"),
    71: ("–õ—ë–≥–∫–∏–π —Å–Ω–µ–≥", "‚ùÑÔ∏è"),
    73: ("–°–Ω–µ–≥", "‚ùÑÔ∏è"),
    75: ("–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥", "‚ùÑÔ∏è"),
    80: ("–õ—ë–≥–∫–∏–π –ª–∏–≤–µ–Ω—å", "üåßÔ∏è"),
    81: ("–õ–∏–≤–µ–Ω—å", "üåßÔ∏è"),
    82: ("–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å", "üåßÔ∏è"),
    95: ("–ì—Ä–æ–∑–∞", "‚õàÔ∏è"),
    96: ("–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º", "‚õàÔ∏è"),
    99: ("–°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º", "‚õàÔ∏è")
}

async def weather_command(client: Client, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–≥–æ–¥–∞: —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ OpenWeatherMap, –ø—Ä–æ–≥–Ω–æ–∑ —á–µ—Ä–µ–∑ Open-Meteo."""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        prefix = await get_user_prefix(user_id)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–≥–æ–¥–∞ –¥–ª—è user_id={user_id}, chat_id={chat_id}, –ø—Ä–µ—Ñ–∏–∫—Å: '{prefix}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API-–∫–ª—é—á–∞
        if not OPENWEATHERMAP_API_KEY or OPENWEATHERMAP_API_KEY == "YOUR_API_KEY":
            await message.edit_text("‚ùå API-–∫–ª—é—á OpenWeatherMap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.py")
            logger.error("API-–∫–ª—é—á OpenWeatherMap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.py")
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        text = message.text.strip()
        parts = text.split()
        if len(parts) < 2:
            await message.edit_text(f"‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: `{prefix} –ø–æ–≥–æ–¥–∞ <–≥–æ—Ä–æ–¥> [–¥–∞—Ç–∞]`")
            return

        args = parts[1:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        if args[0].lower() != "–ø–æ–≥–æ–¥–∞":
            await message.edit_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{prefix} –ø–æ–≥–æ–¥–∞ <–≥–æ—Ä–æ–¥> [–¥–∞—Ç–∞]`")
            return

        args = args[1:]  # –£–±–∏—Ä–∞–µ–º "–ø–æ–≥–æ–¥–∞"
        if not args:
            await message.edit_text(f"‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: `{prefix} –ø–æ–≥–æ–¥–∞ <–≥–æ—Ä–æ–¥> [–¥–∞—Ç–∞]`")
            return

        city = args[0]
        date_str = args[1] if len(args) > 1 else None

        async with aiohttp.ClientSession() as session:
            if not date_str:
                # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ OpenWeatherMap
                params = {
                    "q": city,
                    "appid": OPENWEATHERMAP_API_KEY,
                    "units": "metric",
                    "lang": "ru"
                }
                async with session.get(WEATHER_URL, params=params) as resp:
                    if resp.status == 401:
                        await message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π API-–∫–ª—é—á OpenWeatherMap")
                        logger.error(f"–û—à–∏–±–∫–∞ API –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á (401)")
                        return
                    if resp.status != 200:
                        await message.edit_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ API")
                        logger.error(f"–û—à–∏–±–∫–∞ API –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {resp.status}")
                        return
                    data = await resp.json()
                    if data.get("cod") != 200:
                        await message.edit_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        logger.error(f"–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω: {data.get('message')}")
                        return

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
                weather = data["weather"][0]
                main = data["main"]
                wind = data["wind"]
                response = (
                    f"üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ {city}**:\n"
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {main['temp']:.1f}¬∞C\n"
                    f"–û—â—É—â–∞–µ—Ç—Å—è: {main['feels_like']:.1f}¬∞C\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather['description'].capitalize()}\n"
                    f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {main['humidity']}%\n"
                    f"–í–µ—Ç–µ—Ä: {wind['speed']} –º/—Å"
                )
                await message.edit_text(response)
                logger.info(f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è {city} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}")

            else:
                # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–∞—Ç—É —á–µ—Ä–µ–∑ Open-Meteo
                if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_str):
                    await message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY")
                    return

                try:
                    target_date = datetime.strptime(date_str, "%d.%m.%Y")
                except ValueError:
                    await message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞")
                    return

                now = datetime.utcnow()
                max_date = now + timedelta(days=16)  # Open-Meteo –¥–æ 16 –¥–Ω–µ–π
                if target_date.date() < now.date() or target_date.date() > max_date.date():
                    await message.edit_text("‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ 16 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥")
                    return

                # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ OpenWeatherMap Geocoding API
                params = {
                    "q": city,
                    "limit": 1,
                    "appid": OPENWEATHERMAP_API_KEY
                }
                async with session.get(GEOCODING_URL, params=params) as resp:
                    if resp.status == 401:
                        await message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π API-–∫–ª—é—á OpenWeatherMap")
                        logger.error(f"–û—à–∏–±–∫–∞ Geocoding API –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á (401)")
                        return
                    if resp.status != 200 or not await resp.json():
                        await message.edit_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        logger.error(f"–û—à–∏–±–∫–∞ Geocoding API –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {resp.status}")
                        return
                    geo_data = await resp.json()
                    lat, lon = geo_data[0]["lat"], geo_data[0]["lon"]

                # –®–∞–≥ 2: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —á–µ—Ä–µ–∑ Open-Meteo
                params = {
                    "latitude": lat,
                    "longitude": lon,
                    "hourly": "temperature_2m,weather_code,wind_speed_10m",
                    "timezone": "auto"
                }
                async with session.get(OPEN_METEO_URL, params=params) as resp:
                    if resp.status != 200:
                        await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                        logger.error(f"–û—à–∏–±–∫–∞ Open-Meteo API –¥–ª—è {city}: {resp.status}")
                        return
                    data = await resp.json()

                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
                hourly = data.get("hourly", {})
                times = hourly.get("time", [])
                temps = hourly.get("temperature_2m", [])
                codes = hourly.get("weather_code", [])
                winds = hourly.get("wind_speed_10m", [])

                target_date_str = target_date.strftime("%Y-%m-%d")
                forecast = [
                    {"time": t, "temp": temp, "code": code, "wind": wind}
                    for t, temp, code, wind in zip(times, temps, codes, winds)
                    if t.startswith(target_date_str)
                ]

                if not forecast:
                    await message.edit_text("‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã")
                    logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city} –Ω–∞ {date_str} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
                night = [h for h in forecast if 0 <= datetime.strptime(h["time"], "%Y-%m-%dT%H:%M").hour < 6]
                morning = [h for h in forecast if 6 <= datetime.strptime(h["time"], "%Y-%m-%dT%H:%M").hour < 12]
                day = [h for h in forecast if 12 <= datetime.strptime(h["time"], "%Y-%m-%dT%H:%M").hour < 18]
                evening = [h for h in forecast if 18 <= datetime.strptime(h["time"], "%Y-%m-%dT%H:%M").hour < 24]

                # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω –∏ –º–∞–∫—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                min_temp = min(h["temp"] for h in forecast)
                max_temp = max(h["temp"] for h in forecast)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
                response = f"üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ {city} –Ω–∞ {date_str}**\n"
                response += f"–ú–∏–Ω: {min_temp:.1f}¬∞C, –ú–∞–∫—Å: {max_temp:.1f}¬∞C\n\n"

                def format_period(period, period_name, emoji):
                    if not period:
                        return ""
                    result = f"{emoji} **{period_name}**:\n"
                    for hour in period:
                        time = datetime.strptime(hour["time"], "%Y-%m-%dT%H:%M").strftime("%H:%M")
                        desc, icon = WEATHER_CODE_MAP.get(hour["code"], ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "‚ùì"))
                        result += (
                            f"{time}: {hour['temp']:.1f}¬∞C {icon} {desc:<20} –í–µ—Ç–µ—Ä: {hour['wind']:.1f} –º/—Å\n"
                        )
                    return result + "\n"

                response += format_period(night, "–ù–æ—á—å", "üåô")
                response += format_period(morning, "–£—Ç—Ä–æ", "üåÖ")
                response += format_period(day, "–î–µ–Ω—å", "‚òÄÔ∏è")
                response += format_period(evening, "–í–µ—á–µ—Ä", "üåÑ")

                await message.edit_text(response.strip())
                logger.info(f"–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city} –Ω–∞ {date_str} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ weather_command –¥–ª—è user_id={user_id}: {e}")
        try:
            await message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ")
        except Exception as edit_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_e}")

def register(app: Client):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–≥–æ–¥–∞."""
    app.on_message(template_filter("–ø–æ–≥–æ–¥–∞", ignore_case=True) & filters.me)(weather_command)