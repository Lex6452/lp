from pyrogram import Client, filters
from pyrogram.types import Message
import os
import unicodedata
import re
import subprocess
from db.db_utils import video_note_exists, save_video_note, delete_video_note, list_video_notes, get_video_note
from utils.filters import template_filter

def normalize_filename(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞, —É–±–∏—Ä–∞—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã."""
    name = unicodedata.normalize('NFKD', name).encode('ASCII', 'ignore').decode('ascii')
    name = name.replace(' ', '_')
    name = re.sub(r'[^\w.]', '', name)
    name = re.sub(r'_+', '_', name)
    name = name.strip('_')
    return name or 'video_note'

async def convert_video_to_note(input_path: str, output_path: str) -> bool:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–≤—É–∫–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏
        has_audio = subprocess.run(
            ["ffprobe", "-i", input_path, "-show_streams", "-select_streams", "a", "-loglevel", "error"],
            capture_output=True
        ).returncode == 0

        command = [
            "ffmpeg",
            "-i", input_path,
            "-vf", "crop=min(iw\\,ih):min(iw\\,ih),scale=512:512",
            "-c:v", "libx264",
            "-profile:v", "baseline",
            "-level", "3.0",
            "-pix_fmt", "yuv420p",
            *(["-c:a", "aac", "-shortest"] if has_audio else ["-an"]),
            "-y",
            output_path
        ]
        
        subprocess.run(command, check=True, timeout=30)
        return os.path.exists(output_path)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

async def convert_to_video_note_cmd(client: Client, message: Message):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç"""
    try:
        if not message.reply_to_message or not message.reply_to_message.video:
            await message.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!")
            return

        user_id = message.from_user.id
        save_dir = "video_notes"
        os.makedirs(save_dir, exist_ok=True)
        
        temp_path = os.path.join(save_dir, f"temp_{user_id}_{message.id}")
        output_path = os.path.join(save_dir, f"converted_{user_id}_{message.id}.mp4")

        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        await client.download_media(message.reply_to_message.video.file_id, temp_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        if not await convert_video_to_note(temp_path, output_path):
            await message.edit("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!")
            if os.path.exists(temp_path):
                os.remove(temp_path)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.delete()
        await send_video_note_wrapper(client, message.chat.id, output_path)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for path in [temp_path, output_path]:
            if os.path.exists(path):
                os.remove(path)
                
    except Exception as e:
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        for path in [temp_path, output_path]:
            if path and os.path.exists(path):
                os.remove(path)

async def add_video_note_cmd(client: Client, message: Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ (—Å–æ –∑–≤—É–∫–æ–º, –µ—Å–ª–∏ –µ—Å—Ç—å)"""
    try:
        if not message.reply_to_message or not (message.reply_to_message.video_note or message.reply_to_message.video):
            await message.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ –∏–ª–∏ –≤–∏–¥–µ–æ!")
            return

        video_note_name = message.text.split(maxsplit=1)[1].strip()
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
        if not (1 <= len(video_note_name) <= 50):
            await message.edit("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        if any(ord(char) < 32 for char in video_note_name):
            await message.edit("‚ùå –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
            return
        if await video_note_exists(user_id, video_note_name):
            await message.edit(f"‚ùå –í–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ '{video_note_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–µ–π
        save_dir = "video_notes"
        os.makedirs(save_dir, exist_ok=True)
        safe_name = normalize_filename(video_note_name)
        temp_path = os.path.join(save_dir, f"temp_{user_id}_{message.id}")
        file_path = os.path.join(save_dir, f"vn_{user_id}_{safe_name}_{message.reply_to_message.id}.mp4")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        media = message.reply_to_message.video or message.reply_to_message.video_note
        if media.file_size > 50 * 1024 * 1024:
            await message.edit("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>50 –ú–ë)")
            return

        await client.download_media(media.file_id, temp_path)
        
        if not await convert_video_to_note(temp_path, file_path):
            await message.edit("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!")
            if os.path.exists(temp_path):
                os.remove(temp_path)
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        if await save_video_note(user_id, video_note_name, file_path):
            await message.edit(f"‚úÖ –í–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ '{video_note_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        else:
            await message.edit("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if os.path.exists(temp_path):
            os.remove(temp_path)
            
    except Exception as e:
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        for path in [temp_path, file_path]:
            if path and os.path.exists(path):
                os.remove(path)

async def send_video_note_wrapper(client: Client, chat_id: int, file_path: str):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–µ –±–æ–ª–µ–µ 60 —Å–µ–∫)
        duration = int(float(subprocess.check_output(
            ["ffprobe", "-v", "error", "-show_entries", "format=duration", 
             "-of", "default=noprint_wrappers=1:nokey=1", file_path]
        ).decode().strip()))
        
        if duration > 60:
            raise ValueError("–í–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥")

        await client.send_video_note(
            chat_id=chat_id,
            video_note=file_path,
            duration=duration
        )
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

async def get_video_note_cmd(client: Client, message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫"""
    try:
        video_note_name = message.text.split(maxsplit=1)[1].strip()
        user_id = message.from_user.id
        file_path = await get_video_note(user_id, video_note_name)

        if not file_path or not os.path.exists(file_path):
            await message.edit(f"‚ùå –í–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ '{video_note_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        await message.delete()
        if not await send_video_note_wrapper(client, message.chat.id, file_path):
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫")
            
    except Exception as e:
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def delete_video_note_cmd(client: Client, message: Message):
    """–£–¥–∞–ª—è–µ—Ç –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ –ø–æ –∏–º–µ–Ω–∏"""
    try:
        video_note_name = message.text.split(maxsplit=1)[1].strip()
        user_id = message.from_user.id

        if await delete_video_note(user_id, video_note_name):
            await message.edit(f"üóëÔ∏è –í–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ '{video_note_name}' —É–¥–∞–ª—ë–Ω!")
        else:
            await message.edit(f"‚ùå –í–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ '{video_note_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def list_video_notes_cmd(client: Client, message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–æ–≤"""
    try:
        user_id = message.from_user.id
        video_notes = await list_video_notes(user_id)

        if not video_notes:
            await message.edit("üìÇ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–æ–≤!")
        else:
            video_notes_list = "\n".join(f"{i+1}. {note['name']}" for i, note in enumerate(video_notes))
            await message.edit(f"üìÇ –í–∞—à–∏ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–∏:\n\n{video_notes_list}\n\n–í—Å–µ–≥–æ: {len(video_notes)}")
    except Exception as e:
        await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def register(app: Client):
    
    app.on_message(template_filter("+–∫—Ä—É–∂–æ—á–µ–∫", ignore_case=True) & filters.me)(add_video_note_cmd)
    app.on_message(template_filter("-–∫—Ä—É–∂–æ—á–µ–∫", ignore_case=True) & filters.me)(delete_video_note_cmd)
    app.on_message(template_filter("–∫—Ä—É–∂–æ—á–µ–∫", ignore_case=True) & filters.me)(list_video_notes_cmd)
    app.on_message(template_filter("–∫—Ä—É–∂–æ—á–∫–∏", ignore_case=True) & filters.me)(get_video_note_cmd)
    app.on_message(template_filter("–≤–∫—Ä—É–≥", ignore_case=True) & filters.me)(convert_to_video_note_cmd)
