import logging
import re
from datetime import datetime
import aiohttp
from pyrogram import Client, filters
from pyrogram.types import Message
from db.db_utils import get_user_prefix
from utils.filters import template_filter
from config import NASA_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
NASA_APOD_URL = "https://api.nasa.gov/planetary/apod"

async def space_command(client: Client, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∫–æ—Å–º–æ—Å: –ø–æ–ª—É—á–∞–µ—Ç Astronomy Picture of the Day –æ—Ç NASA API."""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        prefix = await get_user_prefix(user_id)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Å–º–æ—Å –¥–ª—è user_id={user_id}, chat_id={chat_id}, –ø—Ä–µ—Ñ–∏–∫—Å: '{prefix}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API-–∫–ª—é—á–∞
        if not NASA_API_KEY or NASA_API_KEY == "YOUR_NASA_API_KEY":
            await message.edit_text("‚ùå API-–∫–ª—é—á NASA –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.py")
            logger.error("API-–∫–ª—é—á NASA –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.py")
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        text = message.text.strip()
        parts = text.split()
        if len(parts) < 2:
            await message.edit_text(f"‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: `{prefix} –∫–æ—Å–º–æ—Å [–¥–∞—Ç–∞]`")
            return

        args = parts[1:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        if args[0].lower() != "–∫–æ—Å–º–æ—Å":
            await message.edit_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{prefix} –∫–æ—Å–º–æ—Å [–¥–∞—Ç–∞]`")
            return

        args = args[1:]  # –£–±–∏—Ä–∞–µ–º "–∫–æ—Å–º–æ—Å"
        date_str = args[0] if args else None

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {"api_key": NASA_API_KEY}
        if date_str:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (YYYY-MM-DD)
            if not re.match(r"^\d{4}-\d{2}-\d{2}$", date_str):
                await message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
                return
            try:
                target_date = datetime.strptime(date_str, "%Y-%m-%d")
                now = datetime.now()
                if target_date.date() > now.date():
                    await message.edit_text("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
                    return
                params["date"] = date_str
            except ValueError:
                await message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞")
                return

        # –ó–∞–ø—Ä–æ—Å –∫ NASA API
        async with aiohttp.ClientSession() as session:
            async with session.get(NASA_APOD_URL, params=params) as resp:
                if resp.status == 401:
                    await message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π API-–∫–ª—é—á NASA")
                    logger.error("–û—à–∏–±–∫–∞ NASA API: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á (401)")
                    return
                if resp.status == 404:
                    await message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    logger.error(f"–î–∞–Ω–Ω—ã–µ APOD –∑–∞ {date_str or '—Å–µ–≥–æ–¥–Ω—è'} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (404)")
                    return
                if resp.status != 200:
                    await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                    logger.error(f"–û—à–∏–±–∫–∞ NASA API: {resp.status}")
                    return
                data = await resp.json()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        title = data.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        date = data.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        media_type = data.get("media_type", "unknown")
        url = data.get("url", "")
        explanation = data.get("explanation", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤
        if len(explanation) > 500:
            explanation = explanation[:497] + "..."

        media_emoji = "üì∑" if media_type == "image" else "üé•"
        response = (
            f"üåå **–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ –¥–Ω—è: {title}**\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"{media_emoji} –¢–∏–ø: {'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' if media_type == 'image' else '–í–∏–¥–µ–æ'}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {url}\n"
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {explanation}"
        )

        await message.edit_text(response)
        logger.info(f"APOD –∑–∞ {date} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ space_command –¥–ª—è user_id={user_id}: {e}")
        try:
            await message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—Å–º–æ—Å–µ")
        except Exception as edit_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_e}")

def register(app: Client):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Å–º–æ—Å."""
    app.on_message(template_filter("–∫–æ—Å–º–æ—Å", ignore_case=True) & filters.me)(space_command)