import logging
import re
import aiohttp
from pyrogram import Client, filters
from pyrogram.types import Message
from db.db_utils import get_user_prefix
from utils.filters import template_filter
from config import API_KEY_WHOIS, API_BASE_URL_WHOIS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞
DOMAIN_REGEX = r"^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$"

async def fetch_whois_data(domain: str, api_key: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç WHOIS-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ API."""
    async with aiohttp.ClientSession() as session:
        headers = {"x-api-key": api_key}
        url = f"{API_BASE_URL_WHOIS}/whois/{domain}"
        try:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 400:
                    return {"error": "Invalid domain format"}
                elif response.status == 401:
                    return {"error": "Invalid or missing API key"}
                elif response.status == 429:
                    return {"error": "API key request limit exceeded"}
                else:
                    return {"error": f"API error: {response.status}"}
        except aiohttp.ClientError as e:
            logger.error(f"API request error for {domain}: {e}")
            return {"error": "Failed to connect to API"}

async def fetch_batch_whois_data(domains: list[str], api_key: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç WHOIS-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ API."""
    async with aiohttp.ClientSession() as session:
        headers = {"x-api-key": api_key}
        url = f"{API_BASE_URL_WHOIS}/whois"
        payload = {"domains": domains}
        try:
            async with session.post(url, headers=headers, json=payload) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 400:
                    return {"error": "Invalid domains or format"}
                elif response.status == 401:
                    return {"error": "Invalid or missing API key"}
                elif response.status == 429:
                    return {"error": "API key request limit exceeded"}
                else:
                    return {"error": f"API error: {response.status}"}
        except aiohttp.ClientError as e:
            logger.error(f"Batch API request error: {e}")
            return {"error": "Failed to connect to API"}

async def format_whois_data(data: dict, domain: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç WHOIS-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    if "error" in data:
        return f"üåç **WHOIS: {domain}**\n‚ùå {data['error']}\n\n"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º WHOIS-–¥–∞–Ω–Ω—ã–µ
    whois_text = data.get("whois", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    ip_address = data.get("ip_address", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    source = data.get("source", "unknown")

    # –ü–∞—Ä—Å–∏–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∏–∑ WHOIS-–¥–∞–Ω–Ω—ã—Ö
    parsed_data = {
        "Domain Name": domain.lower(),
        "Registrar": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "Creation Date": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "Expiration Date": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "Updated Date": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "Domain Status": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "Name Servers": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "Registrant Name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "Registrant Email": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "Admin Email": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }

    name_servers = []
    statuses = []
    registrant_email = None
    lines = whois_text.splitlines()
    for line in lines:
        line = line.strip()
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ WHOIS
        if line.startswith("Domain Name:"):
            parsed_data["Domain Name"] = line.split(":", 1)[1].strip().lower()
        elif line.startswith("Registrar:"):
            parsed_data["Registrar"] = line.split(":", 1)[1].strip()
        elif line.startswith("Creation Date:"):
            parsed_data["Creation Date"] = line.split(":", 1)[1].strip().split("T")[0]
        elif line.startswith("Registry Expiry Date:") or line.startswith("Expiration Date:"):
            parsed_data["Expiration Date"] = line.split(":", 1)[1].strip().split("T")[0]
        elif line.startswith("Updated Date:"):
            parsed_data["Updated Date"] = line.split(":", 1)[1].strip().split("T")[0]
        elif line.startswith("Domain Status:"):
            status = line.split(":", 1)[1].strip()
            if status not in statuses:
                statuses.append(status)
        elif line.startswith("Name Server:"):
            ns = line.split(":", 1)[1].strip().rstrip(".").lower()  # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â—É—é —Ç–æ—á–∫—É
            if ns not in name_servers:
                name_servers.append(ns)
        elif line.startswith("Registrant Name:") or line.startswith("Registrant Organization:"):
            parsed_data["Registrant Name"] = line.split(":", 1)[1].strip()
        elif line.startswith("Registrant Email:"):
            parsed_data["Registrant Email"] = line.split(":", 1)[1].strip()
        elif line.startswith("Admin Email:"):
            parsed_data["Admin Email"] = line.split(":", 1)[1].strip()
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ TCI (.ru, .su)
        elif line.startswith("domain:"):
            parsed_data["Domain Name"] = line.split(":", 1)[1].strip().lower()
        elif line.startswith("registrar:"):
            parsed_data["Registrar"] = line.split(":", 1)[1].strip()
        elif line.startswith("created:"):
            parsed_data["Creation Date"] = line.split(":", 1)[1].strip().split("T")[0]
        elif line.startswith("paid-till:"):
            parsed_data["Expiration Date"] = line.split(":", 1)[1].strip().split("T")[0]
        elif line.startswith("state:"):
            status = line.split(":", 1)[1].strip()
            if status not in statuses:
                statuses.append(status)
        elif line.startswith("nserver:"):
            ns = line.split(":", 1)[1].strip().rstrip(".").lower()  # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â—É—é —Ç–æ—á–∫—É
            if ns not in name_servers:
                name_servers.append(ns)
        elif line.startswith("person:"):
            parsed_data["Registrant Name"] = line.split(":", 1)[1].strip()
        elif line.startswith("e-mail:"):
            email = line.split(":", 1)[1].strip().split("(")[0].strip()  # –£–¥–∞–ª—è–µ–º (transfer) –∏ –ø—Ä–æ–±–µ–ª—ã
            if not registrant_email:
                registrant_email = email
                parsed_data["Registrant Email"] = email
            parsed_data["Admin Email"] = email  # TCI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω email –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª–µ–π

    if name_servers:
        parsed_data["Name Servers"] = ", ".join(name_servers[:3])
    if statuses:
        parsed_data["Domain Status"] = ", ".join(statuses[:3])

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    output = (
        f"üåç **WHOIS: {parsed_data['Domain Name']}**\n"
        f"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {parsed_data['Registrar']}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {parsed_data['Creation Date']}\n"
        f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {parsed_data['Expiration Date']}\n"
        f"üìÖ –û–±–Ω–æ–≤–ª—ë–Ω: {parsed_data['Updated Date']}\n"
        f"üîí –°—Ç–∞—Ç—É—Å: {parsed_data['Domain Status']}\n"
        f"üîó DNS: {parsed_data['Name Servers']}\n"
        f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {parsed_data['Registrant Name']}\n"
        f"üìß Email –≤–ª–∞–¥–µ–ª—å—Ü–∞: {parsed_data['Registrant Email']}\n"
        f"üìß Email –∞–¥–º–∏–Ω–∞: {parsed_data['Admin Email']}\n"
    )
    if ip_address != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
        output += f"üåê IP-–∞–¥—Ä–µ—Å: {ip_address}\n"
    output += f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n\n"
    return output

async def whois_command(client: Client, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É whois: –ø–æ–ª—É—á–∞–µ—Ç WHOIS-–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API."""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        prefix = await get_user_prefix(user_id)
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã whois –¥–ª—è user_id={user_id}, chat_id={chat_id}, –ø—Ä–µ—Ñ–∏–∫—Å: '{prefix}'")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        text = message.text.strip()
        parts = text.split()
        if len(parts) < 2:
            await message.edit_text(f"‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω: `{prefix} whois <–¥–æ–º–µ–Ω> [<–¥–æ–º–µ–Ω> ...]`")
            return

        args = parts[1:]
        if args[0].lower() != "whois":
            await message.edit_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{prefix} whois <–¥–æ–º–µ–Ω> [<–¥–æ–º–µ–Ω> ...]`")
            return

        domains = args[1:]
        if not domains:
            await message.edit_text(f"‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω: `{prefix} whois <–¥–æ–º–µ–Ω> [<–¥–æ–º–µ–Ω> ...]`")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–º–µ–Ω–æ–≤
        valid_domains = []
        for domain in domains:
            if re.match(DOMAIN_REGEX, domain):
                valid_domains.append(domain.lower())
            else:
                await message.edit_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞: {domain}")
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –¥–æ–º–µ–Ω: {domain}")
                return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–º–µ–Ω—ã
        response = ""
        if len(valid_domains) == 1:
            # –û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            data = await fetch_whois_data(valid_domains[0], API_KEY_WHOIS)
            response = await format_whois_data(data, valid_domains[0])
        else:
            # –ü–∞–∫–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            batch_data = await fetch_batch_whois_data(valid_domains, API_KEY_WHOIS)
            if "error" in batch_data:
                response = f"‚ùå {batch_data['error']}\n"
            else:
                for result in batch_data.get("results", []):
                    response += await format_whois_data(result, result.get("domain"))

        if not response:
            await message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤")
            return

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(response) > 4000:
            response = response[:3997] + "..."

        await message.edit_text(response.strip())
        logger.info(f"WHOIS-–¥–∞–Ω–Ω—ã–µ –¥–ª—è {', '.join(valid_domains)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ whois_command –¥–ª—è user_id={user_id}: {e}")
        try:
            await message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ WHOIS-–¥–∞–Ω–Ω—ã—Ö")
        except Exception as edit_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_e}")

def register(app: Client):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã whois."""
    app.on_message(template_filter("whois", ignore_case=True) & filters.me)(whois_command)