import logging
import ipaddress
import aiohttp
from pyrogram import Client, filters
from pyrogram.types import Message
from db.db_utils import get_user_prefix
from utils.filters import template_filter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
IPINFO_URL = "https://ipinfo.io/{ip}/geo"

async def ip_command(client: Client, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É ip: –ø–æ–ª—É—á–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± IP-–∞–¥—Ä–µ—Å–µ —á–µ—Ä–µ–∑ ipinfo.io."""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        prefix = await get_user_prefix(user_id)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã ip –¥–ª—è user_id={user_id}, chat_id={chat_id}, –ø—Ä–µ—Ñ–∏–∫—Å: '{prefix}'")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        text = message.text.strip()
        parts = text.split()
        if len(parts) < 2:
            await message.edit_text(f"‚ùå –£–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å: `{prefix} ip <IP-–∞–¥—Ä–µ—Å>`")
            return

        args = parts[1:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        if args[0].lower() != "ip":
            await message.edit_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{prefix} ip <IP-–∞–¥—Ä–µ—Å>`")
            return

        args = args[1:]  # –£–±–∏—Ä–∞–µ–º "ip"
        if not args:
            await message.edit_text(f"‚ùå –£–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å: `{prefix} ip <IP-–∞–¥—Ä–µ—Å>`")
            return

        ip_address = args[0]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è IP-–∞–¥—Ä–µ—Å–∞
        try:
            ipaddress.ip_address(ip_address)
        except ValueError:
            await message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP-–∞–¥—Ä–µ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IPv4 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.0.1) –∏–ª–∏ IPv6")
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å: {ip_address}")
            return

        # –ó–∞–ø—Ä–æ—Å –∫ ipinfo.io –±–µ–∑ API-–∫–ª—é—á–∞
        async with aiohttp.ClientSession() as session:
            url = IPINFO_URL.format(ip=ip_address)
            async with session.get(url) as resp:
                if resp.status == 404:
                    await message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    logger.error(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è IP {ip_address} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (404)")
                    return
                if resp.status == 429:
                    await message.edit_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ ipinfo.io")
                    logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è IP {ip_address} (429)")
                    return
                if resp.status != 200:
                    await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                    logger.error(f"–û—à–∏–±–∫–∞ ipinfo.io API –¥–ª—è IP {ip_address}: {resp.status}")
                    return
                data = await resp.json()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        ip = data.get("ip", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        city = data.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        region = data.get("region", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        country = data.get("country", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        loc = data.get("loc", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        org = data.get("org", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        postal = data.get("postal", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        timezone = data.get("timezone", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        hostname = data.get("hostname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        response = (
            f"üåê **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP: {ip}**\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n"
            f"üó∫Ô∏è –†–µ–≥–∏–æ–Ω: {region}\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {country}\n"
            f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {loc}\n"
            f"üè¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {org}\n"
            f"üì™ –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {postal}\n"
            f"‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n"
            f"üíª –•–æ—Å—Ç–Ω–µ–π–º: {hostname}"
        )

        await message.edit_text(response)
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP {ip_address} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ip_command –¥–ª—è user_id={user_id}: {e}")
        try:
            await message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± IP")
        except Exception as edit_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_e}")

def register(app: Client):
    app.on_message(template_filter("ip", ignore_case=True) & filters.me)(ip_command)